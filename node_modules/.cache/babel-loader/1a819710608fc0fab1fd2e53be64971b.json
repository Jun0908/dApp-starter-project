{"ast":null,"code":"var _jsxFileName = \"/Users/jun/Desktop/ETH-dApp/dApp-starter-project/src/App.js\";\n//App.js\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n/* ethers 変数を使えるようにする*/\n\nimport { ethers } from \"ethers\";\n/* ABIファイルを含むWavePortal.jsonファイルをインポートする*/\n\nimport abi from \"./utils/WavePortal.json\";\n\nconst App = () => {\n  /* ユーザーのパブリックウォレットを保存するために使用する状態変数を定義 */\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  /* ユーザーのメッセージを保存するために使用する状態変数を定義 */\n\n  const [messageValue, setMessageValue] = useState(\"\");\n  /* すべてのwavesを保存する状態変数を定義 */\n\n  const [allWaves, setAllWaves] = useState([]);\n  console.log(\"currentAccount: \", currentAccount);\n  /* デプロイされたコントラクトのアドレスを保持する変数を作成 */\n\n  const contractAddress = \"0x318225F6C9ABBC836BBF523f8f7F91eb4B9Bd42A\";\n  /* コントラクトからすべてのwavesを取得するメソッドを作成 */\n\n  /* ABIの内容を参照する変数を作成 */\n\n  const contractABI = abi.abi;\n\n  const getAllWaves = async () => {\n    const {\n      ethereum\n    } = window;\n\n    try {\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        /* コントラクトからgetAllWavesメソッドを呼び出す */\n\n        const waves = await wavePortalContract.getAllWaves();\n        /* UIに必要なのは、アドレス、タイムスタンプ、メッセージだけなので、以下のように設定 */\n\n        const wavesCleaned = waves.map(wave => {\n          return {\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message\n          };\n        });\n        /* React Stateにデータを格納する */\n\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  /**\n   * `emit`されたイベントをフロントエンドに反映させる\n   */\n\n\n  useEffect(() => {\n    let wavePortalContract;\n\n    const onNewWave = (from, timestamp, message) => {\n      console.log(\"NewWave\", from, timestamp, message);\n      setAllWaves(prevState => [...prevState, {\n        address: from,\n        timestamp: new Date(timestamp * 1000),\n        message: message\n      }]);\n    };\n    /* NewWaveイベントがコントラクトから発信されたときに、情報をを受け取ります */\n\n\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n      wavePortalContract.on(\"NewWave\", onNewWave);\n    }\n    /*メモリリークを防ぐために、NewWaveのイベントを解除します*/\n\n\n    return () => {\n      if (wavePortalContract) {\n        wavePortalContract.off(\"NewWave\", onNewWave);\n      }\n    };\n  }, []);\n  /* window.ethereumにアクセスできることを確認する関数を実装 */\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have MetaMask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n      /* ユーザーのウォレットへのアクセスが許可されているかどうかを確認 */\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n        getAllWaves();\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  /* connectWalletメソッドを実装 */\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected: \", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  /* waveの回数をカウントする関数を実装 */\n\n\n  const wave = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        /* ABIを参照 */\n\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        let contractBalance = await provider.getBalance(wavePortalContract.address);\n        console.log(\"Contract balance:\", ethers.utils.formatEther(contractBalance));\n        /* コントラクトに👋（wave）を書き込む */\n\n        const waveTxn = await wavePortalContract.wave(messageValue, {\n          gasLimit: 300000\n        });\n        console.log(\"Mining...\", waveTxn.hash);\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        let contractBalance_post = await provider.getBalance(wavePortalContract.address);\n        /* コントラクトの残高が減っていることを確認 */\n\n        if (contractBalance_post < contractBalance) {\n          /* 減っていたら下記を出力 */\n          console.log(\"User won ETH!\");\n        } else {\n          console.log(\"User didn't win ETH.\");\n        }\n\n        console.log(\"Contract balance after wave:\", ethers.utils.formatEther(contractBalance_post));\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  /* WEBページがロードされたときにcheckIfWalletIsConnected()を実行 */\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dataContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"hand-wave\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 11\n    }\n  }, \"\\uD83D\\uDC4B\"), \" \", \"WELCOME!\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }\n  }, \"\\u30A4\\u30FC\\u30B5\\u30EA\\u30A2\\u30E0\\u30A6\\u30A9\\u30EC\\u30C3\\u30C8\\u3092\\u63A5\\u7D9A\\u3057\\u3066\\u3001\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8\\u3092\\u4F5C\\u6210\\u3057\\u305F\\u3089\\u3001\", /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"hand-wave\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 11\n    }\n  }, \"\\uD83D\\uDC4B\"), \"\\u3092\\u9001\\u3063\\u3066\\u304F\\u3060\\u3055\\u3044\", /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"shine\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 11\n    }\n  }, \"\\u2728\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  }), !currentAccount && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    onClick: connectWallet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 11\n    }\n  }, \"Connect Wallet\"), currentAccount && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 11\n    }\n  }, \"Wallet Connected\"), currentAccount && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    onClick: wave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 11\n    }\n  }, \"Wave at Me\"), currentAccount && /*#__PURE__*/React.createElement(\"textarea\", {\n    name: \"messageArea\",\n    placeholder: \"\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8\\u306F\\u3053\\u3061\\u3089\",\n    type: \"text\",\n    id: \"message\",\n    value: messageValue,\n    onChange: e => setMessageValue(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 11\n    }\n  }), currentAccount && allWaves.slice(0).reverse().map((wave, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      style: {\n        backgroundColor: \"#F8F8FF\",\n        marginTop: \"16px\",\n        padding: \"8px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 19\n      }\n    }, \"Address: \", wave.address), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 19\n      }\n    }, \"Time: \", wave.timestamp.toString()), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 19\n      }\n    }, \"Message: \", wave.message));\n  })));\n};\n\nexport default App;","map":{"version":3,"names":["React","useEffect","useState","ethers","abi","App","currentAccount","setCurrentAccount","messageValue","setMessageValue","allWaves","setAllWaves","console","log","contractAddress","contractABI","getAllWaves","ethereum","window","provider","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","map","wave","address","waver","timestamp","Date","message","error","onNewWave","from","prevState","on","off","checkIfWalletIsConnected","accounts","request","method","length","account","connectWallet","alert","count","getTotalWaves","toNumber","contractBalance","getBalance","utils","formatEther","waveTxn","gasLimit","hash","wait","contractBalance_post","e","target","value","slice","reverse","index","backgroundColor","marginTop","padding","toString"],"sources":["/Users/jun/Desktop/ETH-dApp/dApp-starter-project/src/App.js"],"sourcesContent":["//App.js\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n/* ethers 変数を使えるようにする*/\nimport { ethers } from \"ethers\";\n/* ABIファイルを含むWavePortal.jsonファイルをインポートする*/\nimport abi from \"./utils/WavePortal.json\";\n\nconst App = () => {\n  /* ユーザーのパブリックウォレットを保存するために使用する状態変数を定義 */\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  /* ユーザーのメッセージを保存するために使用する状態変数を定義 */\n  const [messageValue, setMessageValue] = useState(\"\");\n  /* すべてのwavesを保存する状態変数を定義 */\n  const [allWaves, setAllWaves] = useState([]);\n  console.log(\"currentAccount: \", currentAccount);\n  /* デプロイされたコントラクトのアドレスを保持する変数を作成 */\n  const contractAddress = \"0x318225F6C9ABBC836BBF523f8f7F91eb4B9Bd42A\";\n  /* コントラクトからすべてのwavesを取得するメソッドを作成 */\n  /* ABIの内容を参照する変数を作成 */\n  const contractABI = abi.abi;\n\n  const getAllWaves = async () => {\n    const { ethereum } = window;\n\n    try {\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n        /* コントラクトからgetAllWavesメソッドを呼び出す */\n        const waves = await wavePortalContract.getAllWaves();\n        /* UIに必要なのは、アドレス、タイムスタンプ、メッセージだけなので、以下のように設定 */\n        const wavesCleaned = waves.map((wave) => {\n          return {\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message,\n          };\n        });\n        /* React Stateにデータを格納する */\n        setAllWaves(wavesCleaned);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /**\n   * `emit`されたイベントをフロントエンドに反映させる\n   */\n  useEffect(() => {\n    let wavePortalContract;\n\n    const onNewWave = (from, timestamp, message) => {\n      console.log(\"NewWave\", from, timestamp, message);\n      setAllWaves((prevState) => [\n        ...prevState,\n        {\n          address: from,\n          timestamp: new Date(timestamp * 1000),\n          message: message,\n        },\n      ]);\n    };\n\n    /* NewWaveイベントがコントラクトから発信されたときに、情報をを受け取ります */\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      wavePortalContract = new ethers.Contract(\n        contractAddress,\n        contractABI,\n        signer\n      );\n      wavePortalContract.on(\"NewWave\", onNewWave);\n    }\n    /*メモリリークを防ぐために、NewWaveのイベントを解除します*/\n    return () => {\n      if (wavePortalContract) {\n        wavePortalContract.off(\"NewWave\", onNewWave);\n      }\n    };\n  }, []);\n\n  /* window.ethereumにアクセスできることを確認する関数を実装 */\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        console.log(\"Make sure you have MetaMask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n      /* ユーザーのウォレットへのアクセスが許可されているかどうかを確認 */\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n        getAllWaves();\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  /* connectWalletメソッドを実装 */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      console.log(\"Connected: \", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  /* waveの回数をカウントする関数を実装 */\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        /* ABIを参照 */\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        let contractBalance = await provider.getBalance(wavePortalContract.address);\n        console.log(\"Contract balance:\", ethers.utils.formatEther(contractBalance));\n        /* コントラクトに👋（wave）を書き込む */\n        const waveTxn = await wavePortalContract.wave(messageValue, {\n          gasLimit: 300000,\n        });\n        console.log(\"Mining...\", waveTxn.hash);\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        let contractBalance_post = await provider.getBalance(\n          wavePortalContract.address\n        );\n        /* コントラクトの残高が減っていることを確認 */\n        if (contractBalance_post < contractBalance) {\n          /* 減っていたら下記を出力 */\n          console.log(\"User won ETH!\");\n        } else {\n          console.log(\"User didn't win ETH.\");\n        }\n        console.log(\n          \"Contract balance after wave:\",\n          ethers.utils.formatEther(contractBalance_post)\n        );\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /* WEBページがロードされたときにcheckIfWalletIsConnected()を実行 */\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n          <span role=\"img\" aria-label=\"hand-wave\">\n            👋\n          </span>{\" \"}\n          WELCOME!\n        </div>\n        <div className=\"bio\">\n          イーサリアムウォレットを接続して、メッセージを作成したら、\n          <span role=\"img\" aria-label=\"hand-wave\">\n            👋\n          </span>\n          を送ってください\n          <span role=\"img\" aria-label=\"shine\">\n            ✨\n          </span>\n        </div>\n        <br />\n        {/* ウォレットコネクトのボタンを実装 */}\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n        {currentAccount && (\n          <button className=\"waveButton\">Wallet Connected</button>\n        )}\n        {/* waveボタンにwave関数を連動 */}\n        {currentAccount && (\n          <button className=\"waveButton\" onClick={wave}>\n            Wave at Me\n          </button>\n        )}\n        {/* メッセージボックスを実装*/}\n        {currentAccount && (\n          <textarea\n            name=\"messageArea\"\n            placeholder=\"メッセージはこちら\"\n            type=\"text\"\n            id=\"message\"\n            value={messageValue}\n            onChange={(e) => setMessageValue(e.target.value)}\n          />\n        )}\n        {/* 履歴を表示する */}\n        {currentAccount &&\n          allWaves\n            .slice(0)\n            .reverse()\n            .map((wave, index) => {\n              return (\n                <div\n                  key={index}\n                  style={{\n                    backgroundColor: \"#F8F8FF\",\n                    marginTop: \"16px\",\n                    padding: \"8px\",\n                  }}\n                >\n                  <div>Address: {wave.address}</div>\n                  <div>Time: {wave.timestamp.toString()}</div>\n                  <div>Message: {wave.message}</div>\n                </div>\n              );\n            })}\n      </div>\n    </div>\n  );\n};\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}