{"ast":null,"code":"var _jsxFileName = \"/Users/jun/Desktop/ETH-dApp/dApp-starter-project/src/App.js\";\n// App.js\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n/* ethers 変数を使えるようにする*/\n\nimport { ethers } from \"ethers\";\nimport abi from \"./utils/WavePortal.json\";\n\nconst App = () => {\n  // ユーザーのパブリックウォレットを保存するために使用する状態変数を定義します。\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const contractAddress = \"0xE4Ed6B7A8Cb49A7C9F0c1bb678A274c03cff5Af1\";\n  console.log(\"currentAccount: \", currentAccount); // window.ethereumにアクセスできることを確認します。\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have MetaMask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      } // ユーザーのウォレットへのアクセスが許可されているかどうかを確認します。\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // connectWalletメソッドを実装\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected: \", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  }; // waveの回数をカウントする関数を実装\n\n\n  const wave = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        console.log(\"Signer:\", signer);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // WEBページがロードされたときに下記の関数を実行します。\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dataContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"hand-wave\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, \"\\uD83D\\uDC4B\"), \" \", \"WELCOME!\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, \"\\u30A4\\u30FC\\u30B5\\u30EA\\u30A2\\u30E0\\u30A6\\u30A9\\u30EC\\u30C3\\u30C8\\u3092\\u63A5\\u7D9A\\u3057\\u3066\\u3001\\u300C\", /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"hand-wave\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, \"\\uD83D\\uDC4B\"), \"(wave)\\u300D\\u3092\\u9001\\u3063\\u3066\\u304F\\u3060\\u3055\\u3044\", /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"shine\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, \"\\u2728\")), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    onClick: wave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, \"Wave at Me\"), !currentAccount && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    onClick: connectWallet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, \"Connect Wallet\"), currentAccount && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    onClick: connectWallet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, \"Wallet Connected\")));\n};\n\nexport default App;","map":{"version":3,"names":["React","useEffect","useState","ethers","abi","App","currentAccount","setCurrentAccount","contractAddress","console","log","checkIfWalletIsConnected","ethereum","window","accounts","request","method","length","account","error","connectWallet","alert","wave","provider","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","contractABI","count","getTotalWaves","toNumber"],"sources":["/Users/jun/Desktop/ETH-dApp/dApp-starter-project/src/App.js"],"sourcesContent":["// App.js\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n/* ethers 変数を使えるようにする*/\nimport { ethers } from \"ethers\";\nimport abi from \"./utils/WavePortal.json\";\nconst App = () => {\n  // ユーザーのパブリックウォレットを保存するために使用する状態変数を定義します。\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const contractAddress = \"0xE4Ed6B7A8Cb49A7C9F0c1bb678A274c03cff5Af1\";\n  console.log(\"currentAccount: \", currentAccount);\n  // window.ethereumにアクセスできることを確認します。\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        console.log(\"Make sure you have MetaMask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n      // ユーザーのウォレットへのアクセスが許可されているかどうかを確認します。\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n      } else {\n        console.log(\"No authorized account found\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  // connectWalletメソッドを実装\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      console.log(\"Connected: \", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  // waveの回数をカウントする関数を実装\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        );\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n        console.log(\"Signer:\", signer);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  // WEBページがロードされたときに下記の関数を実行します。\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n          <span role=\"img\" aria-label=\"hand-wave\">\n            👋\n          </span>{\" \"}\n          WELCOME!\n        </div>\n        <div className=\"bio\">\n          イーサリアムウォレットを接続して、「\n          <span role=\"img\" aria-label=\"hand-wave\">\n            👋\n          </span>\n          (wave)」を送ってください\n          <span role=\"img\" aria-label=\"shine\">\n            ✨\n          </span>\n        </div>\n        {/* waveボタンにwave関数を連動させる。*/}\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button>\n        {/* ウォレットコネクトのボタンを実装 */}\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n        {currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Wallet Connected\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}